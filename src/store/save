import { memo, useState, useCallback, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import PropTypes from 'prop-types';
import { publishItem } from '../Profile/profileSlice';
import { Header } from '../../components/Header/Header';
import { Footer } from '../../components/Footer/Footer';
import s from './PublishItem.module.css';
import { nanoid } from 'nanoid';

const UploadIcon = memo(() => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
    <polyline points="17 8 12 3 7 8" />
    <line x1="12" y1="3" x2="12" y2="15" />
  </svg>
));

const ImagePreview = memo(({ images }) => (
  <div className={s.imagePreview}>
    {images.map((img, index) => (
      <img key={index} src={img} alt={`Preview ${index + 1}`} />
    ))}
  </div>
));

ImagePreview.propTypes = {
  images: PropTypes.arrayOf(PropTypes.string).isRequired
};

const SpecificationRow = memo(({ spec, index, onChange }) => (
  <div className={s.specRow}>
    <input
      type="text"
      placeholder="Название"
      value={spec.name}
      onChange={(e) => onChange(index, 'name', e.target.value)}
      className={s.specInput}
    />
    <input
      type="text"
      placeholder="Значение"
      value={spec.value}
      onChange={(e) => onChange(index, 'value', e.target.value)}
      className={s.specInput}
    />
  </div>
));

SpecificationRow.propTypes = {
  spec: PropTypes.shape({
    name: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired
  }).isRequired,
  index: PropTypes.number.isRequired,
  onChange: PropTypes.func.isRequired
};

export const PublishItem = memo(() => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { theme, currentUser } = useSelector((state) => state.profile);
  
  const [itemData, setItemData] = useState({
    title: '',
    description: '',
    price: '',
    category: 'other',
    images: [],
    specifications: []
  });

  const [newSpecification, setNewSpecification] = useState({ name: '', value: '' });

  const handleImageUpload = useCallback((e) => {
    const files = Array.from(e.target.files);
    const imagePromises = files.map(file => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.readAsDataURL(file);
      });
    });

    Promise.all(imagePromises).then(images => {
      setItemData(prev => ({
        ...prev,
        images: [...prev.images, ...images]
      }));
    });
  }, []);

  const handleSubmit = useCallback((e) => {
    e.preventDefault();
    
    if (!currentUser) {
      alert('Необходимо авторизоваться');
      navigate('/login');
      return;
    }

    if (!itemData.title || !itemData.price || itemData.images.length === 0) {
      alert('Пожалуйста, заполните все обязательные поля');
      return;
    }

    try {
      const newItem = {
        id: nanoid(),
        text: itemData.title,
        price: Number(itemData.price),
        description: itemData.description,
        category: itemData.category,
        img: itemData.images[0],
        images: itemData.images,
        specifications: itemData.specifications,
        publishedBy: currentUser.id,
        date: new Date().toISOString()
      };

      dispatch(publishItem(newItem));
      navigate('/profile');
    } catch (error) {
      console.error('Ошибка при публикации товара:', error);
      alert('Произошла ошибка при публикации товара');
    }
  }, [itemData, currentUser, dispatch, navigate]);

  const handleAddSpecification = useCallback(() => {
    if (newSpecification.name.trim() && newSpecification.value.trim()) {
      setItemData(prev => ({
        ...prev,
        specifications: [...prev.specifications, { 
          id: nanoid(),
          name: newSpecification.name.trim(), 
          value: newSpecification.value.trim() 
        }]
      }));
      setNewSpecification({ name: '', value: '' });
    }
  }, [newSpecification]);

  const handleRemoveSpecification = useCallback((id) => {
    setItemData(prev => ({
      ...prev,
      specifications: prev.specifications.filter(spec => spec.id !== id)
    }));
  }, []);

  const handleInputChange = useCallback((field, value) => {
    setItemData(prev => ({ ...prev, [field]: value }));
  }, []);

  useEffect(() => {
    if (!currentUser) {
      navigate('/login');
    }
  }, [currentUser, navigate]);

  return (
    <>
      <Header />
      <main className={`${s.container} ${s[theme]}`}>
        <h1 className={s.title}>Публикация товара</h1>
        <form className={s.form} onSubmit={handleSubmit}>
          <div className={s.imageSection}>
            <label className={s.fileInputLabel}>
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={handleImageUpload}
                className={s.fileInput}
              />
              <UploadIcon />
              Выберите изображения
            </label>
            <ImagePreview images={itemData.images} />
          </div>

          <div className={s.infoSection}>
            <div className={s.formGroup}>
              <label>Название товара</label>
              <input
                type="text"
                required
                value={itemData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                className={s.input}
              />
            </div>

            <div className={s.formGroup}>
              <label>Цена ₽</label>
              <input
                type="number"
                required
                value={itemData.price}
                onChange={(e) => handleInputChange('price', e.target.value)}
                className={`${s.input} ${s.priceInput}`}
                min="0"
              />
            </div>

            <div className={s.formGroup}>
              <label>Описание</label>
              <textarea
                required
                value={itemData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                className={s.textarea}
                rows="4"
              />
            </div>

            <div className={s.formGroup}>
              <label>Характеристики товара</label>
              <div className={s.specificationsContainer}>
                {itemData.specifications.map((spec) => (
                  <div key={spec.id} className={s.specificationTag}>
                    <span className={s.specName}>{spec.name}</span>
                    <span className={s.specValue}>{spec.value}</span>
                  </div>
                ))}
              </div>
              
              <div className={s.addSpecificationContainer}>
                <input
                  type="text"
                  value={newSpecification.name}
                  onChange={(e) => setNewSpecification(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="Характеристика"
                  className={s.input}
                />
                <input
                  type="text"
                  value={newSpecification.value}
                  onChange={(e) => setNewSpecification(prev => ({ ...prev, value: e.target.value }))}
                  placeholder="Значение"
                  className={s.input}
                />
                <button
                  type="button"
                  onClick={handleAddSpecification}
                  className={s.addSpecificationButton}
                  disabled={!newSpecification.name.trim() || !newSpecification.value.trim()}
                >
                  +
                </button>
              </div>
            </div>

            <div className={s.buttonGroup}>
              <button type="submit" className={s.submitButton}>
                Опубликовать
              </button>
              <button 
                type="button" 
                onClick={() => navigate('/profile')} 
                className={s.cancelButton}
              >
                Отмена
              </button>
            </div>
          </div>
        </form>
      </main>
      <Footer />
    </>
  );
});

PublishItem.propTypes = {
};

PublishItem.displayName = 'PublishItem';























.container {
  padding: 40px;
  min-height: calc(100vh - 160px);
  font-family: "Inter", sans-serif;
  background: #000000;
  color: #ffffff;
}

.title {
  text-align: center;
  margin-bottom: 40px;
  font-size: 36px;
  font-weight: 700;
  color: #FFD700;
}

.form {
  max-width: 1200px;
  margin: 0 auto;
  background: #1a1a1a;
  padding: 30px;
  border-radius: 20px;
  display: grid;
  grid-template-columns: 1fr 1.5fr;
  gap: 30px;
}

.imageSection {
  background: #2d2d2d;
  padding: 20px;
  border-radius: 12px;
  border: 2px dashed #FFD700;
  min-height: 200px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 15px;
}

.fileInputLabel {
  display: inline-flex;
  align-items: center;
  gap: 10px;
  background: transparent;
  border: none;
  color: #ffffff;
  cursor: pointer;
  font-size: 14px;
}

.fileInput {
  display: none;
}

.uploadText {
  color: #FFD700;
  font-size: 16px;
  font-weight: 500;
}

.uploadIcon {
  width: 24px;
  height: 24px;
  color: #FFD700;
}

.fileStatus {
  color: #666;
  font-size: 14px;
}

.imagePreview {
  margin-top: 15px;
  position: relative;
  aspect-ratio: 16/9;
  background: #2d2d2d;
  border-radius: 8px;
  overflow: hidden;
}

.imagePreview img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.infoSection {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.formGroup {
  margin-bottom: 20px;
}

.formGroup label {
  color: #FFD700;
  font-size: 16px;
  font-weight: 700;
  margin-bottom: 25px;
  display: block;
  letter-spacing: 1px;
}

.input, .textarea, .select {
  width: 100%;
  padding: 12px;
  background: #2d2d2d;
  border: none;
  border-radius: 8px;
  color: #ffffff;
  font-size: 14px;
}

.input:focus, .textarea:focus, .select:focus {
  outline: none;
  background: #333333;
  box-shadow: 0 0 0 1px #FFD700;
}

.priceInput {
  font-size: 24px;
  font-weight: 700;
  color: #FFD700;
}

.specificationsContainer {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.specificationTag {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
  background: #1a1a1a;
  border: 1px solid #333;
  border-radius: 12px;
  padding: 12px;
  transition: all 0.2s ease;
}

.specificationTag:hover {
  border-color: #444;
  background: #222;
}

.specName, .specValue {
  padding: 8px 12px;
  font-size: 14px;
  color: #FFD700;
  background: transparent;
}

.specValue {
  color: #fff;
  text-align: right;
}

.addSpecButton {
  width: 42px;
  height: 42px;
  border-radius: 12px;
  background: #1a1a1a;
  border: 1px solid #333;
  color: #FFD700;
  font-size: 22px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
}

.addSpecButton:hover:not(:disabled) {
  background: #222;
  border-color: #FFD700;
  transform: translateY(-1px);
}

.addSpecButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  color: #666;
}

.addSpecificationContainer {
  display: grid;
  grid-template-columns: 1fr 1fr auto;
  gap: 12px;
  align-items: center;
  margin-top: 5px;
}

.specInput {
  width: 100%;
  padding: 16px;
  background: #1a1a1a;
  border: 1px solid #333;
  border-radius: 12px;
  color: #ffffff;
  font-size: 14px;
  transition: all 0.2s ease;
}

.specInput:focus {
  background: #222;
  border-color: #FFD700;
  outline: none;
  box-shadow: 0 0 0 1px rgba(255, 215, 0, 0.1);
}

.specInput::placeholder {
  color: #666;
}

.buttonGroup {
  display: flex;
  gap: 15px;
  margin-top: 20px;
}

.submitButton, .cancelButton {
  padding: 12px 24px;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.submitButton {
  background: transparent;
  color: #FFD700;
  border: 2px solid #FFD700;
  font-size: 14px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  padding: 12px 30px;
  border-radius: 25px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.submitButton:hover {
  background: #FFD700;
  color: #000000;
}

.cancelButton {
  background: #2d2d2d;
  color: #ffffff;
  border: none;
  border-radius: 25px;
  transition: all 0.3s ease;
}

.discount {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #FFD700;
  color: #000000;
  padding: 5px 10px;
  border-radius: 4px;
  font-weight: 600;
  font-size: 14px;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.specificationTag {
  animation: fadeIn 0.2s ease forwards;
}




характеристики 

<div className={s.formGroup}>
  <label>Характеристики товара</label>
  <div className={s.specificationsContainer}>
    {itemData.specifications.map((spec) => (
      <div key={spec.id} className={s.specificationTag}>
        <span className={s.specName}>{spec.name}</span>
        <span className={s.specValue}>{spec.value}</span>
        <button
          type="button"
          onClick={() => handleRemoveSpecification(spec.id)}
          className={s.removeSpecification}
        >
          ×
        </button>
      </div>
    ))}
  </div>
  <div className={s.addSpecificationContainer}>
    <input
      type="text"
      value={newSpecification.name}
      onChange={(e) => setNewSpecification(prev => ({ ...prev, name: e.target.value }))}
      placeholder="Характеристика"
      className={s.specificationInput}
    />
    <input
      type="text"
      value={newSpecification.value}
      onChange={(e) => setNewSpecification(prev => ({ ...prev, value: e.target.value }))}
      placeholder="Значение"
      className={s.specificationInput}
    />
    <button
      type="button"
      onClick={handleAddSpecification}
      className={s.addSpecificationButton}
      disabled={!newSpecification.name.trim() || !newSpecification.value.trim()}
    >
      +
    </button>
  </div>
</div>


/* Контейнер для всех характеристик */
.specificationsContainer {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin-bottom: 25px;
}

/* Стили для тега характеристики */
.specificationTag {
  display: flex;
  align-items: center;
  background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.2));
  padding: 10px 18px;
  border-radius: 25px;
  font-size: 14px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  border: 1px solid rgba(76, 175, 80, 0.2);
  backdrop-filter: blur(8px);
}

.specificationTag:hover {
  transform: translateY(-3px) scale(1.02);
  box-shadow: 0 6px 20px rgba(76, 175, 80, 0.15);
  border-color: rgba(76, 175, 80, 0.3);
}

/* Название характеристики */
.specName {
  color: #4CAF50;
  font-weight: 600;
  margin-right: 8px;
  position: relative;
}

.specName::after {
  content: ":";
  margin-left: 2px;
  opacity: 0.7;
}

/* Значение характеристики */
.specValue {
  color: #333333;
  font-weight: 500;
}

/* Кнопка удаления */
.removeSpecification {
  background: none;
  border: none;
  color: #ff4444;
  cursor: pointer;
  padding: 4px;
  font-size: 16px;
  opacity: 0;
  transition: all 0.3s ease;
  margin-left: 12px;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.specificationTag:hover .removeSpecification {
  opacity: 1;
}

.removeSpecification:hover {
  background: rgba(255, 68, 68, 0.1);
  color: #ff0000;
  transform: rotate(90deg);
}

/* Контейнер для добавления новой характеристики */
.addSpecificationContainer {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-top: 15px;
  background: rgba(76, 175, 80, 0.05);
  padding: 15px;
  border-radius: 15px;
  border: 1px dashed rgba(76, 175, 80, 0.3);
}

/* Поля ввода */
.specificationInput {
  flex: 1;
  padding: 12px 18px;
  border: 1px solid rgba(76, 175, 80, 0.2);
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.9);
  color: #333333;
  font-size: 14px;
  transition: all 0.3s ease;
}

.specificationInput:focus {
  outline: none;
  border-color: #4CAF50;
  box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
}

.specificationInput::placeholder {
  color: #999;
}

/* Кнопка добавления */
.addSpecificationButton {
  padding: 12px 24px;
  background: linear-gradient(135deg, #4CAF50, #45a049);
  color: white;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 600;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.addSpecificationButton:hover:not(:disabled) {
  background: linear-gradient(135deg, #45a049, #388e3c);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
}

.addSpecificationButton:disabled {
  background: linear-gradient(135deg, #cccccc, #bbbbbb);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Темная тема */
.dark .specificationTag {
  background: linear-gradient(135deg, rgba(76, 175, 80, 0.15), rgba(76, 175, 80, 0.25));
  border-color: rgba(76, 175, 80, 0.3);
}

.dark .specificationInput {
  background: rgba(255, 255, 255, 0.05);
  border-color: rgba(76, 175, 80, 0.3);
  color: #ffffff;
}

.dark .specificationInput::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

/* Светлая тема */
.light .specificationTag {
  background: linear-gradient(135deg, rgba(76, 175, 80, 0.05), rgba(76, 175, 80, 0.1));
  border-color: rgba(76, 175, 80, 0.2);
}

.light .specName {
  color: #388e3c;
}

.light .specValue {
  color: #333333;
}


.main {
  min-height: 100vh;
  width: 100%;
  max-width: 100vw;
  overflow-x: hidden;
  background-color: #ffffff;
  margin: 0;
  padding: 0;
  position: relative;
}




.categoriesGrid {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  width: 100%;
  max-width: 100%;
  padding: 0 300px;
  box-sizing: border-box;
  margin: 0 auto;
}

.categoryWrapper {
  flex: 1;
  min-width: 280px;
  max-width: calc(33.333% - 14px);
  position: relative;
}

@media screen and (max-width: 1440px) {
  .categoriesGrid {
    padding: 0 100px;
  }
}

@media screen and (max-width: 1024px) {
  .categoriesGrid {
    padding: 0 40px;
  }
}

@media screen and (max-width: 768px) {
  .categoriesGrid {
    padding: 0 20px;
  }
}

@media screen and (max-width: 480px) {
  .categoriesGrid {
    padding: 0 15px;
  }
}